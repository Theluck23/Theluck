/*
 * sort2-shell排序
 * Created by panyue on 2021/2/27.
 * 
 * 希尔排序是希尔（Donald Shell）于1959年提出的一种排序算法。
 * 希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，
 * 同时该算法是冲破O(n2）的第一批算法之一。
 * 它与插入排序的不同之处在于，它会优先比较距离较远的元素。
 * 希尔排序又叫缩小增量排序。希尔排序是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；
 * 随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。
 */

#include<stdio.h>
#include<stdlib.h>
////////////////////////////////////////////////////////////////////////////////////////////////////////
//shell 1
void ShellSort1(int a[], int n);
//shell 2
void ShellSort2(int a[], int n);
void Swap(int a, int b);
///////////////////////////////////////////////////////////////////////////////////////////////////////
//限制一下长度吧
#define N 100

int main(void)
{
    //定义数组并要求用户输入数组长度
	int array[N]; int len; int userCh;
	//要求用户输入有几个数
	printf("元素个数:");
	scanf_s("%d", &len);
	//要求用户输入需要排序的数组
	printf("输入你的数：");
	for (int i = 0; i < len; i++)
	{
		scanf_s("%d", &array[i]);
	}
	//人生处处是选择 你会选到那个呢
	printf("随机选择一种方法（输入1或2，再按下回车）：");
	scanf_s("%d", &userCh);
	//用的很好
	switch (userCh)
	{
	case 1:ShellSort1(array, len); break;
	case 2:ShellSort2(array, len); break;
	default:printf("???\n");//那就不知道你在干嘛了
		break;
	}
	//输出排序的结果
	for (int i = 0; i < len; i++)
	{
		printf("%d ", array[i]);
	}
	printf("\n");
	//卡一下更好看罢了
	system("pause");
	return 0;
}


//希尔排序法一
void ShellSort1(int a[], int n) 
{
	int i, j, gap, temp;
	for (gap = n / 2; gap > 0; gap /= 2) {
		for (i = gap; i < n; i += gap) {
			temp = a[i];
			for (j = i - gap; j >= 0 && a[j] > temp; j -= gap) {
				a[j + gap] = a[j];
			}
			a[j + gap] = temp;
		}
	}
}
//希尔排序法二，和上面的直接插入排序类似，用数据交换代替法一的数据后移(比较对象只考虑两个元素)
void ShellSort2(int a[], int n)
{
	int i, j, gap;
	//分组
	for (gap = n / 2; gap > 0; gap /= 2)
		//直接插入排序
		for (i = gap; i < n; i++)
			for (j = i - gap; j >= 0 && a[j] > a[j + gap]; j -= gap)
				Swap(a[j], a[j + gap]);
}
//简单的交换元素
void Swap(int a, int b)
{
	int temp;
	temp = a;
	a = b;
	b = temp;
}